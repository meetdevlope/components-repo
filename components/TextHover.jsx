import React, { useState } from "react";

const TextHover = () => {
  const [ham, setham] = useState(false);

  const openHam = () => {
    setham(true);
  };

  const [after, setafter] = useState(false);

  const afterClick = () => {
    setTimeout(() => {
      setafter((val) => !val);
      console.log("thayu");
    }, 350);
  };
  const afterClick2 = () => {
    setTimeout(() => {
      setham(false);
      console.log("thayu");
    }, 350);
  };

  return (
    <div className="flex justify-center items-center flex-col gap-20">
      <div className="h-[40px] overflow-hidden">
        <svg
          width="147"
          height="78"
          viewBox="0 0 147 78"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
          className="[&>*]:transition-all [&>*]:duration-300 [&>*]:hover:-translate-y-1/2 [&>*:nth-child(2)]:delay-[50ms] [&>*:nth-child(3)]:delay-[100ms]  [&>*:nth-child(4)]:delay-[150ms] [&>*:nth-child(5)]:delay-[200ms] [&>*:nth-child(6)]:delay-[250ms] [&>*:nth-child(7)]:delay-[300ms] [&>*:nth-child(2)]:hover:delay-[50ms] [&>*:nth-child(3)]:hover:delay-[100ms]  [&>*:nth-child(4)]:hover:delay-[150ms] [&>*:nth-child(5)]:hover:delay-[200ms] [&>*:nth-child(6)]:hover:delay-[250ms] [&>*:nth-child(7)]:hover:delay-[300ms]"
        >
          <path
            d="M1.13636 11.7841V7.72727H20.25V11.7841H13.125V31H8.26136V11.7841H1.13636ZM1.13636 50.7841V46.7273H20.25V50.7841H13.125V70H8.26136V50.7841H1.13636Z"
            fill="black"
          />
          <path
            d="M24.0227 31V7.72727H28.9432V17.3295H38.9318V7.72727H43.8409V31H38.9318V21.3864H28.9432V31H24.0227ZM24.0227 70V46.7273H28.9432V56.3295H38.9318V46.7273H43.8409V70H38.9318V60.3864H28.9432V70H24.0227Z"
            fill="black"
          />
          <path
            d="M48.0227 31V7.72727H57.2045C58.9621 7.72727 60.4621 8.04167 61.7045 8.67045C62.9545 9.29167 63.9053 10.1742 64.5568 11.3182C65.2159 12.4545 65.5455 13.7917 65.5455 15.3295C65.5455 16.875 65.2121 18.2045 64.5455 19.3182C63.8788 20.4242 62.9129 21.2727 61.6477 21.8636C60.3902 22.4545 58.8674 22.75 57.0795 22.75H50.9318V18.7955H56.2841C57.2235 18.7955 58.0038 18.6667 58.625 18.4091C59.2462 18.1515 59.7083 17.7652 60.0114 17.25C60.322 16.7348 60.4773 16.0947 60.4773 15.3295C60.4773 14.5568 60.322 13.9053 60.0114 13.375C59.7083 12.8447 59.2424 12.4432 58.6136 12.1705C57.9924 11.8902 57.2083 11.75 56.2614 11.75H52.9432V31H48.0227ZM60.5909 20.4091L66.375 31H60.9432L55.2841 20.4091H60.5909ZM48.0227 70V46.7273H57.2045C58.9621 46.7273 60.4621 47.0417 61.7045 47.6705C62.9545 48.2917 63.9053 49.1742 64.5568 50.3182C65.2159 51.4545 65.5455 52.7917 65.5455 54.3295C65.5455 55.875 65.2121 57.2045 64.5455 58.3182C63.8788 59.4242 62.9129 60.2727 61.6477 60.8636C60.3902 61.4545 58.8674 61.75 57.0795 61.75H50.9318V57.7955H56.2841C57.2235 57.7955 58.0038 57.6667 58.625 57.4091C59.2462 57.1515 59.7083 56.7652 60.0114 56.25C60.322 55.7348 60.4773 55.0947 60.4773 54.3295C60.4773 53.5568 60.322 52.9053 60.0114 52.375C59.7083 51.8447 59.2424 51.4432 58.6136 51.1705C57.9924 50.8902 57.2083 50.75 56.2614 50.75H52.9432V70H48.0227ZM60.5909 59.4091L66.375 70H60.9432L55.2841 59.4091H60.5909Z"
            fill="black"
          />
          <path
            d="M69.0227 31V7.72727H84.7045V11.7841H73.9432V17.3295H83.8977V21.3864H73.9432V26.9432H84.75V31H69.0227ZM69.0227 70V46.7273H84.7045V50.7841H73.9432V56.3295H83.8977V60.3864H73.9432V65.9432H84.75V70H69.0227Z"
            fill="black"
          />
          <path
            d="M89.0227 31V7.72727H104.705V11.7841H93.9432V17.3295H103.898V21.3864H93.9432V26.9432H104.75V31H89.0227ZM89.0227 70V46.7273H104.705V50.7841H93.9432V56.3295H103.898V60.3864H93.9432V65.9432H104.75V70H89.0227Z"
            fill="black"
          />
          <path
            d="M118.341 7.72727H123.205V23.9545C123.205 25.4545 122.867 26.7576 122.193 27.8636C121.527 28.9697 120.598 29.822 119.409 30.4205C118.22 31.0189 116.837 31.3182 115.261 31.3182C113.86 31.3182 112.587 31.072 111.443 30.5795C110.307 30.0795 109.405 29.322 108.739 28.3068C108.072 27.2841 107.742 26 107.75 24.4545H112.648C112.663 25.0682 112.788 25.5947 113.023 26.0341C113.265 26.4659 113.595 26.7992 114.011 27.0341C114.436 27.2614 114.936 27.375 115.511 27.375C116.117 27.375 116.629 27.2462 117.045 26.9886C117.47 26.7235 117.792 26.3371 118.011 25.8295C118.231 25.322 118.341 24.697 118.341 23.9545V7.72727ZM118.341 46.7273H123.205V62.9545C123.205 64.4545 122.867 65.7576 122.193 66.8636C121.527 67.9697 120.598 68.822 119.409 69.4205C118.22 70.0189 116.837 70.3182 115.261 70.3182C113.86 70.3182 112.587 70.072 111.443 69.5795C110.307 69.0795 109.405 68.322 108.739 67.3068C108.072 66.2841 107.742 65 107.75 63.4545H112.648C112.663 64.0682 112.788 64.5947 113.023 65.0341C113.265 65.4659 113.595 65.7992 114.011 66.0341C114.436 66.2614 114.936 66.375 115.511 66.375C116.117 66.375 116.629 66.2462 117.045 65.9886C117.47 65.7235 117.792 65.3371 118.011 64.8295C118.231 64.322 118.341 63.697 118.341 62.9545V46.7273Z"
            fill="black"
          />
          <path
            d="M140.648 14.4205C140.557 13.5038 140.167 12.7917 139.477 12.2841C138.788 11.7765 137.852 11.5227 136.67 11.5227C135.867 11.5227 135.189 11.6364 134.636 11.8636C134.083 12.0833 133.659 12.3902 133.364 12.7841C133.076 13.178 132.932 13.625 132.932 14.125C132.917 14.5417 133.004 14.9053 133.193 15.2159C133.39 15.5265 133.659 15.7955 134 16.0227C134.341 16.2424 134.735 16.4356 135.182 16.6023C135.629 16.7614 136.106 16.8977 136.614 17.0114L138.705 17.5114C139.72 17.7386 140.652 18.0417 141.5 18.4205C142.348 18.7992 143.083 19.2652 143.705 19.8182C144.326 20.3712 144.807 21.0227 145.148 21.7727C145.496 22.5227 145.674 23.3826 145.682 24.3523C145.674 25.7765 145.311 27.0114 144.591 28.0568C143.879 29.0947 142.848 29.9015 141.5 30.4773C140.159 31.0455 138.542 31.3295 136.648 31.3295C134.769 31.3295 133.133 31.0417 131.739 30.4659C130.352 29.8902 129.269 29.0379 128.489 27.9091C127.716 26.7727 127.311 25.3674 127.273 23.6932H132.034C132.087 24.4735 132.311 25.125 132.705 25.6477C133.106 26.1629 133.64 26.553 134.307 26.8182C134.981 27.0758 135.742 27.2045 136.591 27.2045C137.424 27.2045 138.148 27.0833 138.761 26.8409C139.383 26.5985 139.864 26.2614 140.205 25.8295C140.545 25.3977 140.716 24.9015 140.716 24.3409C140.716 23.8182 140.561 23.3788 140.25 23.0227C139.947 22.6667 139.5 22.3636 138.909 22.1136C138.326 21.8636 137.61 21.6364 136.761 21.4318L134.227 20.7955C132.265 20.3182 130.716 19.572 129.58 18.5568C128.443 17.5417 127.879 16.1742 127.886 14.4545C127.879 13.0455 128.254 11.8144 129.011 10.7614C129.777 9.70833 130.826 8.88636 132.159 8.29545C133.492 7.70454 135.008 7.40909 136.705 7.40909C138.432 7.40909 139.939 7.70454 141.227 8.29545C142.523 8.88636 143.53 9.70833 144.25 10.7614C144.97 11.8144 145.341 13.0341 145.364 14.4205H140.648ZM140.648 53.4205C140.557 52.5038 140.167 51.7917 139.477 51.2841C138.788 50.7765 137.852 50.5227 136.67 50.5227C135.867 50.5227 135.189 50.6364 134.636 50.8636C134.083 51.0833 133.659 51.3902 133.364 51.7841C133.076 52.178 132.932 52.625 132.932 53.125C132.917 53.5417 133.004 53.9053 133.193 54.2159C133.39 54.5265 133.659 54.7955 134 55.0227C134.341 55.2424 134.735 55.4356 135.182 55.6023C135.629 55.7614 136.106 55.8977 136.614 56.0114L138.705 56.5114C139.72 56.7386 140.652 57.0417 141.5 57.4205C142.348 57.7992 143.083 58.2652 143.705 58.8182C144.326 59.3712 144.807 60.0227 145.148 60.7727C145.496 61.5227 145.674 62.3826 145.682 63.3523C145.674 64.7765 145.311 66.0114 144.591 67.0568C143.879 68.0947 142.848 68.9015 141.5 69.4773C140.159 70.0455 138.542 70.3295 136.648 70.3295C134.769 70.3295 133.133 70.0417 131.739 69.4659C130.352 68.8902 129.269 68.0379 128.489 66.9091C127.716 65.7727 127.311 64.3674 127.273 62.6932H132.034C132.087 63.4735 132.311 64.125 132.705 64.6477C133.106 65.1629 133.64 65.553 134.307 65.8182C134.981 66.0758 135.742 66.2045 136.591 66.2045C137.424 66.2045 138.148 66.0833 138.761 65.8409C139.383 65.5985 139.864 65.2614 140.205 64.8295C140.545 64.3977 140.716 63.9015 140.716 63.3409C140.716 62.8182 140.561 62.3788 140.25 62.0227C139.947 61.6667 139.5 61.3636 138.909 61.1136C138.326 60.8636 137.61 60.6364 136.761 60.4318L134.227 59.7955C132.265 59.3182 130.716 58.572 129.58 57.5568C128.443 56.5417 127.879 55.1742 127.886 53.4545C127.879 52.0455 128.254 50.8144 129.011 49.7614C129.777 48.7083 130.826 47.8864 132.159 47.2955C133.492 46.7045 135.008 46.4091 136.705 46.4091C138.432 46.4091 139.939 46.7045 141.227 47.2955C142.523 47.8864 143.53 48.7083 144.25 49.7614C144.97 50.8144 145.341 52.0341 145.364 53.4205H140.648Z"
            fill="black"
          />
        </svg>
      </div>
      <svg
        width="120"
        height="120"
        viewBox="0 0 120 100"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        onClick={() => {
          openHam();
          afterClick();
          setham(true) ? afterClick2() : null;
        }}
        className="[&>*]:transition-all transition-all duration-300 bg-gray p-4 rounded-lg"
      >
        <path
          d="M10 10H110"
          stroke="black"
          strokeWidth="20"
          strokeLinecap="round"
          style={
            ham
              ? {
                  strokeDasharray: "0 100",
                  strokeDashoffset: `${after ? "0" : "-50"}`,
                }
              : { strokeDasharray: "0 100" }
          }
          className={`${
            ham ? `translate-y-10 ${after ? "translate-y-0" : null}` : null
          }`}
        />
        <path
          d="M10 10H110"
          stroke="black"
          strokeWidth="20"
          strokeLinecap="round"
          style={
            ham
              ? {
                  strokeDasharray: "0 100",
                  strokeDashoffset: `${after ? "1" : "50"}`,
                }
              : { strokeDasharray: "0 100", strokeDashoffset: "1" }
          }
          className={`${
            ham ? `translate-y-10 ${after ? "translate-y-0" : null}` : null
          }`}
        />
        <path
          d="M10 50H110"
          stroke="black"
          strokeWidth="20"
          strokeLinecap="round"
          style={
            ham
              ? { strokeDasharray: "0 100", strokeDashoffset: "-50" }
              : { strokeDasharray: "0 100" }
          }
        />
        <path
          d="M10 50H110"
          stroke="black"
          strokeWidth="20"
          strokeLinecap="round"
          style={
            ham
              ? { strokeDasharray: "0 100", strokeDashoffset: "50" }
              : { strokeDasharray: "0 100", strokeDashoffset: "1" }
          }
        />
        <path
          d="M10 90H110"
          stroke="black"
          strokeWidth="20"
          strokeLinecap="round"
          style={
            ham
              ? {
                  strokeDasharray: "0 100",
                  strokeDashoffset: `${after ? "0" : "-50"}`,
                }
              : { strokeDasharray: "0 100" }
          }
          className={`${
            ham ? `-translate-y-10 ${after ? "-translate-y-0" : null}` : null
          }`}
        />
        <path
          d="M10 90H110"
          stroke="black"
          strokeWidth="20"
          strokeLinecap="round"
          style={
            ham
              ? {
                  strokeDasharray: "0 100",
                  strokeDashoffset: `${after ? "1" : "50"}`,
                }
              : { strokeDasharray: "0 100", strokeDashoffset: "1" }
          }
          className={`${
            ham ? `-translate-y-10 ${after ? "-translate-y-0" : null}` : null
          }`}
        />
      </svg>
    </div>
  );
};

export default TextHover;
